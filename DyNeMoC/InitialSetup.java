import java.io.BufferedReader;
import java.io.FileReader;
import java.util.StringTokenizer;

public class InitialSetup 
{
      public static int     init_infected_people[];
      public static int     num_pop_at_node[]; // stores initial population at each node
	
      /* constructor */
	  InitialSetup()
	  {
		  
	  }
	  
	  /* read the data which is generated by the network generation. This is initial setup of the simulation of epidemic spreading process */
	  public void read_Network_Information() throws Exception
	  {
		  read_Resources_Information();
	  }	/* End of read_Network_Information()*/  
	  
	  /* read all input files of resources directory and store those data into variables/arrays */
	   public void read_Resources_Information() throws Exception 
	   {
		    read_init_infected__people(ConfigParameters.path_init_infected_people);
	         read_init_pop_at_each_node(ConfigParameters.path_init_pop_at_each_node);        
	        //read_Topology_Information(ConfigParameters.path_topology_folder);
	   }/* End Of read_all_input_files() */    
	     
	   public void read_init_infected__people(String _path_init_infected_people) throws Exception 
	   {

		    init_infected_people = new int[ConfigParameters.num_Infected];                
	       // System.out.println("\n read_init_infected__people \n");
	        parse_input_int_data(_path_init_infected_people, init_infected_people);

	   }/* End Of read_init_infected__people() */

	   public void read_init_pop_at_each_node(String _path_init_pop_at_each_node) throws Exception
	   {
		   num_pop_at_node = new int[ConfigParameters.num_Nodes];
		  // System.out.println("\n read_init_pop_at_each_node \n");
		   parse_input_int_data(_path_init_pop_at_each_node, num_pop_at_node);
		
	   }/* End Of read_init_pop_at_each_node() */   	   	   
	  
	   public void parse_input_int_data(String input_file_name, int [] adj_matrix) throws Exception 
	   {
	         String lineRead   = null;
	         BufferedReader br = null;

	         try
	         {

	         	      br = new BufferedReader(new FileReader(input_file_name));
	        	lineRead = br.readLine();
	         	int firstline = Integer.parseInt(lineRead);
	         	
	         	if((input_file_name == ConfigParameters.path_init_infected_people)&&(firstline != ConfigParameters.num_Infected))
	         	{
	         	   System.out.println(" \nError! Miss match of nodes in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	         	   System.exit(1);
	        	}  
	         	else 
	         	{
	         		if((input_file_name == ConfigParameters.path_init_pop_at_each_node) && (firstline != ConfigParameters.num_People)) 
	         		{
	         			System.out.println(" \nError! Miss match of infected people in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	         			System.exit(1);
	         		}
	         		
	         	}
	         	int row_id = 0;
	            while(( lineRead=br.readLine() ) != null)
	            {
	                   parse_input_int_line(adj_matrix, lineRead, row_id);
	                   row_id = row_id + 1;
	            }
	          }
		      catch(Exception e) 
		      {
	         	e.printStackTrace();
	      	  }         
	          finally
	          {
	                br.close();        
	          }

	   }/* End of read_input_int_data() */

	  
	   public void parse_input_int_line( int [] adj_matrix, String data, int row_id)
	   {
	            
	       StringTokenizer st = new StringTokenizer(data,", ");       
	       int count = 0;
	       while (st.hasMoreTokens()) 
	       {  
	         adj_matrix[count] = Integer.parseInt(st.nextToken());   
	        // System.out.print(adj_matrix[(row_id)][count] + "  ");
	         count = count+1;
	       }
	      // System.out.println();
	        
	   }/* End of parse_input_int_data() */		  

}
