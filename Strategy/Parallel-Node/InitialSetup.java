import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

public class InitialSetup 
{
      public static double  init_prob_of_people[][];
      public static double  init_prob_of_HCUs[][]; 
      public static int     adj_matrix_of_graph[][];
      public static int     init_infected_people[][];
      public static double  trans_prob_of_people[][];
      public static double  trans_prob_of_HCUs[][]; 
      public static int     degree_node[];  // stores the degree of each node in graph
      public static int     init_pop_at_node[][]; // stores initial population at each node
	  public static HashMap<Integer, ArrayList<Integer>> hm; //stores each agent location & neighbors information

	  /* constructor */
	  InitialSetup()
	  {
		  
	  }
	  
	  /* read the data which is generated by the network generation. This is initial setup of the simulation of epidemic spreading process */
	  public void read_Network_Information() throws Exception
	  {
		  read_Resources_Information();
		  read_Topology_Information();
	  }	/* End of read_Network_Information()*/  
	  
	  /* read all input files of resources directory and store those data into variables/arrays */
	   public void read_Resources_Information() throws Exception 
	   {
		    read_init_prob_of_people(ConfigParameters.path_init_prob_dist_of_people);
	        read_init_prob_of_HCUs(ConfigParameters.path_init_prob_dist_of_HCUs);
	        read_adj_matrix_of_graph(ConfigParameters.path_adj_matrix_of_graph);
	        read_init_infected__people(ConfigParameters.path_init_infected_people);
	        read_trans_prob_of_people(ConfigParameters.path_trans_prob_matrix_of_people);
	        read_trans_prob_of_HCUs(ConfigParameters.path_trans_prob_matrix_of_HCUs);
	        find_degree_of_each_node(adj_matrix_of_graph);
	        read_init_pop_at_each_node(ConfigParameters.path_init_pop_at_each_node);        
	        //read_Topology_Information(ConfigParameters.path_topology_folder);
	   }/* End Of read_all_input_files() */

	   public void read_init_prob_of_people(String _path_init_prob_dist_of_people) throws Exception 
	   {
	        init_prob_of_people = new double[(ConfigParameters.num_People)][(ConfigParameters.num_Nodes)];
	       // System.out.println("\n read_init_prob_of_people \n");
	        parse_input_double_data(_path_init_prob_dist_of_people, init_prob_of_people);

	   }/* End Of read_init_prob_of_people() */
	   
	   public void read_init_prob_of_HCUs(String _path_init_prob_dist_of_HCUs) throws Exception 
	   {
	        init_prob_of_HCUs = new double[(ConfigParameters.num_HCUs)][(ConfigParameters.num_Nodes)];
	       // System.out.println("\n read_init_prob_of_HCUs \n");
	        parse_input_double_data(_path_init_prob_dist_of_HCUs, init_prob_of_HCUs); 

	   }/* End Of read_init_prob_of_HCUs() */

	   public void read_adj_matrix_of_graph(String _path_adj_matrix_of_graph) throws Exception 
	   {
	        adj_matrix_of_graph = new int[(ConfigParameters.num_Nodes)][(ConfigParameters.num_Nodes)];
	       // System.out.println("\n read_adj_matrix_of_graph \n");
	        parse_input_int_data(_path_adj_matrix_of_graph, adj_matrix_of_graph); 

	   }/* End Of read_adj_matrix_of_graph() */
	   
	   public void read_init_infected__people(String _path_init_infected_people) throws Exception 
	   {

		    init_infected_people = new int[1][ConfigParameters.num_Infected];                
	       // System.out.println("\n read_init_infected__people \n");
	        parse_input_int_data(_path_init_infected_people, init_infected_people);

	   }/* End Of read_init_infected__people() */

	   public void read_trans_prob_of_people(String _path_trans_prob_matrix_of_people) throws Exception 
	   {

	        trans_prob_of_people = new double[(ConfigParameters.num_Nodes)][(ConfigParameters.num_Nodes)];                
	       // System.out.println("\n read_trans_prob_of_people \n");
	        parse_input_double_data(_path_trans_prob_matrix_of_people, trans_prob_of_people);

	   }/* End Of read_trans_prob_of_people() */
	   
	   public void read_trans_prob_of_HCUs(String _path_trans_prob_matrix_of_HCUs) throws Exception 
	   {
	        trans_prob_of_HCUs  = new double[(ConfigParameters.num_Nodes)][(ConfigParameters.num_Nodes)];
	       // System.out.println("\n read_trans_prob_of_HCUs \n");
	        parse_input_double_data(_path_trans_prob_matrix_of_HCUs, trans_prob_of_HCUs); 
	             
	   }/* End Of read_trans_prob_of_HCUs() */
	   
	   public void read_init_pop_at_each_node(String _path_init_pop_at_each_node) throws Exception
	   {
		   init_pop_at_node = new int[1][ConfigParameters.num_Nodes];
		  // System.out.println("\n read_init_pop_at_each_node \n");
		   parse_input_int_data(_path_init_pop_at_each_node, init_pop_at_node);
		
	   }/* End Of read_init_pop_at_each_node() */   	   
	   
	   /*  finds the degree of each node in the graph, Function Parameters: ( adj_matrix )  */
		public void find_degree_of_each_node(int[][] adj_matrix)
		{
			degree_node = new int[(ConfigParameters.num_Nodes)];
			
			//System.out.print("\n Degree of each Node  : ");
			
			for(int i=0; i < ConfigParameters.num_Nodes; i++)
			{
				int count = 0;
				
				for(int j=0; j < ConfigParameters.num_Nodes; j++)
				{
					if(adj_matrix[i][j] == 1)
					  count++;				
				}			
				degree_node[i] = count;	
				//System.out.print( count + "  ");
			}		
			//System.out.print("\n");
			
		}/* End of find_degree_of_each_node() */
	   
	   
	   public void parse_input_double_data(String input_file_name, double [][] prob_dist) throws Exception 
	   {
	         String lineRead   = null;
	         BufferedReader br = null;
	         try
	         {
	        	      br = new BufferedReader(new FileReader(input_file_name));
	        	lineRead = br.readLine();

	         	int first_line = Integer.parseInt(lineRead);

	         	if(((input_file_name == ConfigParameters.path_init_prob_dist_of_people)||(input_file_name == ConfigParameters.path_trans_prob_matrix_of_people))&&(first_line != ConfigParameters.num_People) )
	         	{
	         	  	System.out.println(" \nError! Miss match of people in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	          	  	System.exit(1);
	        	}   
	            else
	            {
	                if(((input_file_name == ConfigParameters.path_init_prob_dist_of_HCUs)||(input_file_name == ConfigParameters.path_trans_prob_matrix_of_HCUs))&&(first_line != ConfigParameters.num_HCUs) )
	         		{
	         	  		System.out.println(" \nError! Miss match of HCUs in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	         	  		System.exit(1);
	        		}  
	                
	            }            
	         	
	            int row_id = 0;
	        	while(( lineRead=br.readLine() ) != null)
	            {
	                   parse_input_double_line(prob_dist, lineRead, row_id);
	                   row_id = row_id + 1;
	            }
	          }
		    catch(Exception e) 
		    {
	         	e.printStackTrace();
	        }         
	        finally
	        {
	                br.close();        
	        }

	   }/* End of read_input_double_data() */
	 
	   public void parse_input_int_data(String input_file_name, int [][] adj_matrix) throws Exception 
	   {
	         String lineRead   = null;
	         BufferedReader br = null;

	         try
	         {

	         	      br = new BufferedReader(new FileReader(input_file_name));
	        	lineRead = br.readLine();
	         	int firstline = Integer.parseInt(lineRead);
	         	
	         	if((input_file_name == ConfigParameters.path_adj_matrix_of_graph)&&(firstline != ConfigParameters.num_Nodes))
	         	{
	         	  // System.out.println(" \nError! Miss match of nodes in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	         	   System.exit(1);
	        	}  
	         	else 
	         	{
	         		if((input_file_name == ConfigParameters.path_init_infected_people) && (firstline != ConfigParameters.num_Infected)) 
	         		{
	         			System.out.println(" \nError! Miss match of infected people in config.properties with HstratConfig.py\nNOTE: Set the parameters properly and Rerun NetworkGeneration \n ");
	         			System.exit(1);
	         		}
	         		
	         	}
	         	int row_id = 0;
	            while(( lineRead=br.readLine() ) != null)
	            {
	                   parse_input_int_line(adj_matrix, lineRead, row_id);
	                   row_id = row_id + 1;
	            }
	          }
		      catch(Exception e) 
		      {
	         	e.printStackTrace();
	      	  }         
	          finally
	          {
	                br.close();        
	          }

	   }/* End of read_input_int_data() */

	   public void parse_input_double_line( double [][] prob_dist, String data, int row_id)
	   {
	            
	       StringTokenizer st = new StringTokenizer(data,", ");       
	       int count = 0;
	       while (st.hasMoreTokens()) 
	       {  
	         prob_dist[(row_id)][count] = Double.parseDouble(st.nextToken());   
	        // System.out.print(prob_dist[(row_id)][count] + "  ");
	         count = count+1;
	       }       
	      // System.out.println();
	           
	   }/* End of parse_input_double_data() */

	   public void parse_input_int_line( int [][] adj_matrix, String data, int row_id)
	   {
	            
	       StringTokenizer st = new StringTokenizer(data,", ");       
	       int count = 0;
	       while (st.hasMoreTokens()) 
	       {  
	         adj_matrix[(row_id)][count] = Integer.parseInt(st.nextToken());   
	        // System.out.print(adj_matrix[(row_id)][count] + "  ");
	         count = count+1;
	       }
	      // System.out.println();
	        
	   }/* End of parse_input_int_data() */	
	   
	   public void read_Topology_Information() throws Exception
	   {
		      int start_index = 0;	      
		      hm = new HashMap<Integer, ArrayList<Integer>>();
		      
		      for(int i=0; i<ConfigParameters.num_Nodes; i++)
			  {
				  //CreateTopologyNode cban = new CreateTopologyNode(i, init_pop_at_node[0][i]);			  
				  String filename = ConfigParameters.path_topology_folder + "adjacency_list_of_node" + i + ".txt";			  
				  read_input_of_node(i, init_pop_at_node[0][i], start_index, filename);
				  start_index = start_index + init_pop_at_node[0][i];
			  }	   
	   }
	   
	   public void read_input_of_node(int nodeId, int population, int start_index, String input_file_name) throws Exception 
		{
		        String lineRead   = null;
		         BufferedReader br = null;

		         try
		         {

		         	      br = new BufferedReader(new FileReader(input_file_name));
		        	lineRead = br.readLine();
		         	int firstline = Integer.parseInt(lineRead);
		         	if((firstline != population))
		         	{
		         	  // System.out.println(" \nError! Miss match of nodes in config.properties with HstratConfig.py\n NOTE: Set the parameters properly and Rerun NetworkGeneration \n");
		         	   System.exit(1);
		        	}
		         	
		         	int agent_id = start_index;
		         	
		            while(( lineRead=br.readLine() ) != null)
		            {
		                   parse_input_int_data(nodeId, lineRead, agent_id);
		                   agent_id = agent_id + 1;
		            }
		          }
			      catch(Exception e) 
			      {
		         	e.printStackTrace();
		      	  }         
		          finally
		          {
		                br.close();        
		          }

		  }/* End of read_input_int_data() */	
		   
		   public void parse_input_int_data(int nodeId, String data, int agent_id)
		   {
			   ArrayList<Integer> mylist = new ArrayList<Integer>();		   
		       StringTokenizer st = new StringTokenizer(data,", ");   
		       
		       mylist.add(nodeId);
		       mylist.add(nodeId);
		       int count = 0;
		       while (st.hasMoreTokens()) 
		       {  
		         int num = Integer.parseInt(st.nextToken()); 
		         mylist.add(num);
		         count = count+1;
		       }
		       mylist.add(2, count);	       
		       hm.put(agent_id, mylist);
		      // System.out.println("Person Id :" + agent_id + " information : " + hm.get(agent_id));
		   }/* End of parse_input_int_data() */

}
