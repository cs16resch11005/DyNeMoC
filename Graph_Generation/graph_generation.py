#!/usr/bin/python

# This program file used to generate initial probability distribution of each individual in population, and HCU's for their location.
# Also it generates transition probability matrices for ovarall population and HCUs.

import igraph
from igraph import *
import pickle
import os
import numpy as np, numpy.random
import sys
from random import shuffle
import shutil
import Hstratconfig


numpy.set_printoptions(threshold=sys.maxint)
dir_path = os.path.dirname(os.path.realpath(__file__))

#global variables
num_nodes    = int(Hstratconfig.num_nodes)
num_edges    = int(Hstratconfig.num_edges)
num_HCUs     = int(Hstratconfig.num_HCUs)
num_people   = int(Hstratconfig.num_people)
num_infected = int(Hstratconfig.num_infected)
network_topology = int(Hstratconfig.network_topology)
topology_density = float(Hstratconfig.topology_density)
fractions    = Hstratconfig.population_dist

resources_path = dir_path +"/../Input/Network/Resources/"
BA_path = dir_path +"/../Input/Network/Topology/"


# format the data generated by random_graph_generation function
def format_string3(gen_data, start_index):
	#print gen_data
	format_data = "";
	for x in gen_data:
		num = int(x) + start_index
		format_data = format_data + str(num) + ", "
	format_data = format_data[:-2]
        return format_data

# format the data generated by random_graph_generation function
def format_string1(gen_data):
	format_data = str(gen_data).strip('[ ').strip(']').replace('\n','')
        return format_data

# format the data generated by generate_prob_distribution function
def format_string2(gen_data):
	format_data = str(gen_data).strip('[ ').strip(']').replace('\n','')
        temp_data = format_data.split()
        final_data = ""
        for x in temp_data:
		final_data = final_data + x + ", " 
	final_data = final_data.strip(', ')     
        return final_data
	
# this function generate initial probability distribution for individuals, and HCUs
def generate_prob_distribution(n):
	d = np.random.dirichlet(np.ones(n),size=1)
	return d

# this function generating the random graph for given numbe of vertices and edges
def random_graph_generation(_nodes, _edges):
	#random_graph = Graph.K_Regular(n=_nodes,k=15,directed=False,multiple=False)
	random_graph = Graph.Erdos_Renyi(n=_nodes, m=_edges)
	#getting the adjacency matrix and adjacency list
	adj_matrix = random_graph.get_adjacency()
	adj_list = random_graph.get_adjlist()
        return (adj_matrix,adj_list)

# this function generating the random graph for given numbe of vertices and edges
def barabasi_graph_generation(_nodes):
	barabasi_graph =  Graph.Barabasi(_nodes,2,outpref=False, directed=False, zero_appeal=1, implementation="psumtree", start_from=None)
	#getting the adjacency matrix and adjacency list
	adj_matrix = barabasi_graph.get_adjacency()
	adj_list = barabasi_graph.get_adjlist()
        return (adj_matrix,adj_list)


# this function write transition probability matrices of ovarall population, and HCUs into file
def write_trans_prob_matrix_of_population(adj_matrix, adj_list):
	# open file for writing for transition probability matrices of overall population based on random graph
        fp4 = open((resources_path+"transition_prob_matrix_of_people.txt"), "w+")
        #fp4.write("transition probability matrix of overall popuation : \n")
	fp4.write(str(num_people)+'\n')	
        row_id1 = 0
	for row_data1 in adj_matrix :
		row_len1  = len(adj_list[(row_id1)])
		temp_data = "" 	
                count1     = 0	
		for x1 in row_data1:
			if x1 == 1 :
				temp_data =  temp_data + str(0.2 / row_len1 ) + ', '
			else:
				if row_id1 == count1 :
					temp_data = temp_data + str(0.8) + ', '
				else:
					temp_data = temp_data + str(0.0) + ', '
			count1 = count1 + 1
                temp_data = temp_data.strip(', ')
		fp4.write(temp_data + "\n")
		row_id1 = row_id1 + 1	
	fp4.close()
   
# this function write transition probability matrices of ovarall population, and HCUs into file
def write_trans_prob_matrix_of_HCU(adj_matrix, adj_list):
	# open file for writing for transition probability matrices of HCUs based on random graph
        fp5 = open((resources_path+"transition_prob_matrix_of_HCUs.txt"), "w+")
	fp5.write(str(num_HCUs) + '\n')
        #fp5.write("transition probability matrix of all HCUs : \n")
        row_id2 = 0
	for row_data2 in adj_matrix :
		row_len2 = len(adj_list[(row_id2)])
		temp_data = "" 		
		for x2 in row_data2:
			if x2 == 1 :
				temp_data = temp_data + str(1.0 / row_len2 ) + ', '
			else:
				temp_data = temp_data + str(0.0) + ', '
                temp_data = temp_data.strip(', ')
		fp5.write(temp_data + "\n")
		row_id2 = row_id2 + 1	
	fp5.close()

# this function generate transition probability matrices for ovarall population, and HCUs
def network_toplogy_matrices():
	population = []
	total = 0

	for i in range(num_nodes):
		cnt = int(num_people * fractions[i])
		print cnt
		total = total + cnt
	balance = num_people - total
	print "\nbalance : %s"%(balance)
	total = 0
        
	for i in range(num_nodes):		
		if(i < balance): 
			_nodes = int(num_people * fractions[i]) +1
		else :             
			_nodes = int(num_people * fractions[i])  		 
		population.append(_nodes)
 		print "\npeople at node %s : %s "%(i, population[i])		
		if(network_topology == 1):			
			_edges = int((topology_density)*(_nodes)*(_nodes-1)/2)
			adj_matrix, adj_list = random_graph_generation(_nodes, _edges)
		else:
			adj_matrix, adj_list = barabasi_graph_generation(_nodes)		
		#print adj_matrix
		#print adj_list
		filename = BA_path + "adjacency_list_of_node" + str(i) + ".txt"
        	# open file for writing adjacency matrix of random graph
        	fp3 = open(filename, "w+")
        	fp3.write(str(population[i])+ '\n')
		for row_data in adj_list :
			print format_string3(row_data, total)
			fp3.write(format_string3(row_data, total) + '\n')
		fp3.close()
		total = total + _nodes
	print "\nTotal Population  : %s"%(total)
	fp3 = open((resources_path+"initial_population_at_each_node.txt"), "w+")
	fp3.write(str(total) + '\n')
	fp3.write(format_string1(population) + '\n')
	fp3.close()

# this function generate transition probability matrices for ovarall population, and HCUs
def transition_prob_matrices():
	adj_matrix, adj_list = random_graph_generation(num_nodes, num_edges)
	#adj_matrix, adj_list = barabasi_graph_generation()
	print adj_matrix
	print adj_list
        # open file for writing adjacency matrix of random graph
        fp3 = open((resources_path + "adjacency_matrix_of_graph.txt"), "w+")
        fp3.write(str(num_nodes)+ '\n')
	for row_data in adj_matrix :
		print format_string1(row_data)
		fp3.write(format_string1(row_data) + '\n')
	fp3.close()
        write_trans_prob_matrix_of_population(adj_matrix, adj_list)
	write_trans_prob_matrix_of_HCU(adj_matrix, adj_list)

# this function generate initial probability distribution of each individual in population, HCU's for their location and list of people infected
def initial_prob_distribution(num_people, num_HCUs):
        # open file for writing initial probability distribution of each individual
	fp1 = open((resources_path+"initial_prob_dist_of_people.txt"), "w+") 	
	fp1.write(str(num_people)+'\n')	
	for i in range(1):
		prob_dist = generate_prob_distribution(num_nodes)
		fp1.write(format_string2(prob_dist) + '\n')
		#print prob_dist
		#print len(prob_dist[0])
	fp1.close()

	# open file for writing initial probability distribution of each HCU
	fp2 = open((resources_path +"initial_prob_dist_of_HCUs.txt"), "w+") 
	fp2.write(str(num_HCUs) + '\n')
	for i in range(1):
		prob_dist = generate_prob_distribution(num_nodes)
		fp2.write(format_string2(prob_dist) + '\n')
		#print prob_dist
		#print len(prob_dist[0])
	fp2.close()	
	
	# open file for writing initial probability distribution of each HCU
	fp6 = open((resources_path+"initial_infected_people_list.txt"), "w+") 
	fp6.write(str(num_infected) + '\n')
	rs = np.random.choice(num_people, num_infected, replace=False)
	fp6.write(format_string2(rs) + '\n')		
	fp6.close()
         
def clearNetworkDatabase():
	if (os.path.isdir(BA_path) == True):
		shutil.rmtree(BA_path)  #remove old directory
		os.mkdir(BA_path)	#create new directory
		#print("BA Folder Deletion and Creation Done Sucessfully")
	else:
		os.mkdir(BA_path)	#create new directory
		#print("Creation Done Sucessfully")
	if (os.path.isdir(resources_path) == True):
		shutil.rmtree(resources_path)   #remove old directory
		os.mkdir(resources_path)	#create new directory
		#print("Resources Deletion and Creation Done Sucessfully")
	else:
		os.mkdir(resources_path)	#create new directory
		#print("Resources Folder Creation Done Sucessfully")



# main function definition
def main():
	clearNetworkDatabase()
	initial_prob_distribution(num_people, num_HCUs)
	transition_prob_matrices()	
	network_toplogy_matrices()
	
# calling main function
main()

